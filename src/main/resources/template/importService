package ${PackageName};

import ${DaoClassName};
import ${ModelClassName};
import ${VoClassName};
import com.best.capital.pay.service.base.imports.BaseImport;
import com.best.capital.pay.service.base.imports.ExcelParsePackageVo;
import com.best.capital.pay.service.base.imports.ExcelRowErrorVo;
import com.best.capital.pay.utils.base.FieldUtil;
import com.best.oasis.excelImport.exception.ImportBaseException;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.util.ArrayList;
import java.util.List;

/**
 * 系统生成导入类
 * @author admin
 * @date ${Date}
 */
@Service
public class Import${SimpleName} extends BaseImport<${SimpleName}Vo> {

    @Autowired
    private ${SimpleName}Dao ${LowerCaseSimpleName}Dao;

    private static final String TEMPLATE_NAME = "${TableName}_IMPORT.xml";

    public ExcelParsePackageVo batchImport(MultipartFile file) {
        LOG.info("开始执行导入");
        LOG.info("将导入文件解析为对象");
        List<${SimpleName}Vo> pendingInsertList = parseOORSFromFileBytes(file, TEMPLATE_NAME);

        LOG.info("校验导入字段");
        List<ExcelRowErrorVo> errors = validateBatchImportData(pendingInsertList, FieldUtil.getFieldNameList(${SimpleName}Vo.class));

        LOG.info("批量插入导入数据");
        doInsert(pendingInsertList);

        LOG.info("执行导入完成");
        return new ExcelParsePackageVo(errors, pendingInsertList.size());
    }

    /**
     * 插入导入数据
     */
    private void doInsert(List<${SimpleName}Vo> pendingInsertList) {
        ${LowerCaseSimpleName}Dao.batchInsert(dozer.convertList(pendingInsertList, ${SimpleName}.class));
    }

    /**
     * 注册转换类
     */
    @Override
    protected void registerConvert() {

    }

    @Override
    protected ImportBaseException convertCellValueException(ImportBaseException exp) {
        return null;
    }

    protected List<ExcelRowErrorVo> validateBatchImportData(List<${SimpleName}Vo> pendingInsertList, List<String> requiredFieldNameList) {
        LOG.info("进行常规校验，校验空值");
        List<ExcelRowErrorVo> commonValidateResult = super.commonValidateImportData(pendingInsertList, requiredFieldNameList);
        if(CollectionUtils.isNotEmpty(commonValidateResult)){
            return commonValidateResult;
        }
        LOG.info("进行其他校验");
        return additionalValidate(pendingInsertList);
    }

    private List<ExcelRowErrorVo> additionalValidate(List<${SimpleName}Vo> pendingInsertList) {
        List<ExcelRowErrorVo> errors = new ArrayList<>();
        int i = 2;
        for (${SimpleName}Vo ${LowerCaseSimpleName} : pendingInsertList) {
            additionalValidate4Bean(errors, ${LowerCaseSimpleName}, i);
            i++;
        }
        return errors;
    }

    /**
     * 额外的校验
     */
    private void additionalValidate4Bean(List<ExcelRowErrorVo> errors, ${SimpleName}Vo bean, int j){
        //do nothing
    }

}